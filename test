```sql
-- User
CREATE TABLE Users (
userID INT,
userName VARCHAR(20),
userPassword VARCHAR(20).
userRegion VARCHAR(20)
PRIMARY KEY(userID)
);


-- UserPlaylist
CREATE TABLE UserPlaylist (
playlistID INT,
playlistName VARCHAR(30),
userID INT,
PRIMARY KEY(playlistID, userID),
FOREIGN KEY(userID) REFERENCES Users(userID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


-- Trending Video: --
CREATE TABLE Video (
videoID VARCHAR(255),
videoTitle TEXT,
videoCategory TEXT,
videoView INT,
videoLikes INT,
channel text,
PRIMARY KEY(videoId)
);


-- RecommendedVideo
CREATE TABLE RecommendedVideo (
userID INT,
videoID VARCHAR(255),
PRIMARY KEY (userID, videoID),
FOREIGN KEY(videoID) REFERENCES Video(videoID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY(userID) REFERENCES Users(userID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


-- Region --
CREATE TABLE Region (
regionID INT,
regionName VARCHAR(20),
PRIMARY KEY(regionID)
);


-- RegionTrendingAnalysis --
CREATE TABLE RegionTrendingAnalysis (
analysisID VARCHAR(20),
regionID INT,
totalvideoCount INT,
category1 TEXT,
category2 TEXT,
category3 TEXT,
category4 TEXT,
category5 TEXT,
category6 TEXT,
category7 TEXT,
category8 TEXT,
category9 TEXT,
category10 TEXT,
category11 TEXT,
category12 TEXT,
category13 TEXT,
category14 TEXT,
category15 TEXT,
category16 TEXT,
category17 TEXT,
category18 TEXT,
category19 TEXT,
category20 TEXT,
category21 TEXT,
category22 TEXT,
category23 TEXT,
category24 TEXT,
category25 TEXT,
category26 TEXT,
category27 TEXT,
category28 TEXT,
category29 TEXT,
PRIMARY KEY(analysisID, regionID),
FOREIGN KEY(regionID) REFERENCES Region(regionID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


-- Many to many relations --
-- Friend --
CREATE TABLE Friend(
userIDa INT,
userIDb INT,
PRIMARY KEY(userIDa, userIDb),
FOREIGN KEY(userIDa) REFERENCES Users(userID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY(userIDb) REFERENCES Users(userID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


-- Contains --
CREATE TABLE Contain(
videoID VARCHAR(50),
playListID INT,
PRIMARY KEY(videoID, playListID),
FOREIGN KEY(videoID) REFERENCES Video(videoID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY(playListID) REFERENCES UserPlaylist(playListID)
ON DELETE CASCADE
ON UPDATE CASCADE
);
```
